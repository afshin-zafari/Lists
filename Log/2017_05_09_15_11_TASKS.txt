
================================================================================
          001)PL\TODO.txt
================================================================================

================================================================================
          001)Review\TODO.txt
================================================================================

================================================================================
          002)P2(FMM2D)\TODO.txt
================================================================================

================================================================================
          003)P4(FMM3D-DLB-Distrib)\TODO.txt
================================================================================
* Problem Setup 
	o Setup (in MATLAB)
		+ Points = ...
		+ Boxes = <--(points)
		+ Tree = <--(box) 
		+ Children = <-- box
		+ Far Boxes = <-- box
		+ Near Boxes = <-- box
		+ Kappa= <--(Level) 
		+ Translator ( kappa, level, X ) 
		+ Z_near
		+ Far field
		+ Receiving
		+ I vect		
	o import/export 
		+ translators
	o create V_vect of a Box, memory allocate
	o export Z_near
	o export V_vect
* complete the body of run() methods
	o MVP
	o interpolation
	o green translate
	o green interpolate
	o receiving task
* A good prolem setup to be prepared
* Partitioning ? 

================================================================================
          004)P1(DuctTeip)\TODO.txt
================================================================================
* Applications
	o Shallow Water
		* data distribution
		* tasks in DuctTeip engine should work
		* write code for time-stepping
		* run and test
* Rackham
	o Update Experiments scripts
	o Compile codes with MKL BLAS 
		* PaRSEC
		* StarPU
		* ScaLAPACK

* Triolith NSC allocation
================================================================================
          021)DT-UTP\TODO.txt
================================================================================
o FMM related DuctTeip changes
	* DTData <--SGMatrix
	* glbCtx.Data <-- DTData
	* Turn off mem alloc / mem pool in ductteip
	* Set memory info for data : addr, Len, leading dim
	* GetContentAddr and getHeaderAddr to be changed
	* FMMContext
	* runKernels: t->run
	* DTData
	* Optim Comm
	* Task type, 
		* Arg 1: M2M/T, index
		* Arg 2: S/O, Level, group
		* Arg 3: S/O, Level, group
	* Task pack/unpack
	* SGTaskGemv <-- received task
	* when data received, if current version is being used, the data to be copied to a spare memory
	* Unit Tests
		o Simple Problem setup
			* Tree is ok: L, #groups in l, groups in l
			* Operators are ok, M,T,V : #,MxN , 
			* sum(abs(M read)) = sum(abs(M expectd))
			* Points in boxes are ok #Box, #Pi in Bi
			* Charges are initialzed ok : #X, sum(abs(Xi))=sum(abs(X exp))
		o Si Oj ownership Works
		o Task ownership works 
		o Send and receive data work
		o Export import task works
	o Migrated task runs ok
	o Near field works
	o Far field works
	o DLB works
		* Points or Box distribution?
		* Input Parameters
	o DLB
	o Box min size , L 
	o Profiling
	o Output files
		* Outputs
			o Work , Comm, Data Memory per process/core
	o DLB profile
		* Silent mode: #, sum 
		* Idle time: trace, sum
		* Busy time: trace , sum 
		* exported: sum, trace
		* imported: trace, sum 
		* optim migration: #, sum
		* descrepancy measure: trace
o General 
	* not send listeners
	* MPICOmm static
	* #SUBTASK to be in the config options
	* Task Cancellation
	* 2 x 3 x 5 , 3rd level for decrease run-time overhead
		o Memory  alloc in user program, not in engine
		o Partitioning should be made easier
		o A-> A1-A4, t1,t2,t3,t4 : t1-->t3 + t2-->t4
		  submit t1-t4. t1,t2 starts running and submit sub tasks
		  when t1 finishes, t2 gets ready and submit the next set of sub tasks
		  ==>the number of sub tasks is always bound to sub-tasks of ti and tj without killing the parallelism(no barrier)
	* Post receive
	* getDataByHandler() uses vector not list
	* MPI_DATA_TYPE for data
	* Visualization
		o proc, thread,event, start, finish
		o SQL : split start-finish to 1 miliseconds slots
		o SQL : aggregate on  Proc, Thread, events, 1ms,1s
		o Python: plots of  SQL results
			- idle/busy of threads during whole execution
			- idle/busy of a proc ....
			- communication of proc's
			- task distribution of proc's for DLB
			- descrepancy of load
UTP Changes
	* SHORTCUT=0 to be removed

================================================================================
          021)NLA\TODO.txt
================================================================================
* Assignment 1
	o first run
	o replace the preconditioner, rerun, doo the results change?
	o make the graphs better, font size, line width etc.
A2 ?
A3 ?
================================================================================
          030)Kappa\TODO.txt
================================================================================
* Chapter 1
	o Abstract
	o Introduction
		* Bridge of ScProg and Para Resources
		* What is PP? Why is it hard?
			o different parallel hardware, different approaches 
			o requires hardware architectures knowldge, it is more technical
		* What is Task based PP? Why is it good?
			o define tasks and their in/out data
			o preserve the sequential logic
* Chapter 2
	o Versioning
	o partitioing
	o communications
		* asynch
		* listener
		* redundant comm
		* receiving higher versions than local
	o hierarchical
* Chapter 3
	o Interface
	o Language binding
	o Sample applications
		* Data structure
		* LUPP
		* Shallow Water
		* Iterative
		* Complex algorithm
		* Data storage - sparse
		* Large data
		* Deep learning
* Chapter 4
	o Papers I-IV

================================================================================
          050)P3(UbiPar)\TODO.txt
================================================================================
Rackham
	git get
	compile
	run
	experiments 	

================================================================================
          100)SE\TODO.txt
================================================================================
Headers 
	.h						   
	no fwd decl						   
	include order	Related	C	C++	other libs	my proj	   
	namespace						   
	no using namespace xxxx						   
	terminate with comments							   
	glolbal func's in namespaces						   
	no global func's 						      
	static class type forbidden	b'cos undefined order of ctor dtor					   
	they should be plain old data types
	file names
	variable names
	namespace
	function names
SRC
	namespace
	local var's defined close to usage						   
	all to be initialized	
	c++ casts, not x = (type) y;
Unit Tests
	git clone gtest
	build gtest
	test one
	1st test: DuctTeip and MPI	
Doxygen
	create config file
	doc target in makefile
	git push it
	add comments for modules
	add comments for variables
	add comments for functions
	add comments for bodies
		
		
